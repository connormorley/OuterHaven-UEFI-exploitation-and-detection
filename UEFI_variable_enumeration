import string
import os
import sys
import time
from time import localtime
import os.path
import struct
import platform
import win32api, win32process, win32security
from collections import namedtuple
from ctypes import *

EFI_VAR_MAX_BUFFER_SIZE = 1024 * 1024
PyLong_AsByteArray = pythonapi._PyLong_AsByteArray
PyLong_AsByteArray.argtypes = [py_object, c_char_p, c_size_t, c_int, c_int]

def guid_str(guid0, guid1, guid2, guid3):
    return ("{:08X}-{:04X}-{:04X}-{:4}-{:6}".format(guid0, guid1, guid2, guid3[:2].encode('hex').upper(),
                                                    guid3[-6::].encode('hex').upper()))

class EFI_HDR_WIN(namedtuple('EFI_HDR_WIN', 'Size DataOffset DataSize Attributes guid0 guid1 guid2 guid3')):
    __slots__ = ()

    def __str__(self):
        return """
Header (Windows)
----------------
VendorGuid= {{{:08X}-{:04X}-{:04X}-{:4}-{:6}}}
Size      = 0x{:08X}
DataOffset= 0x{:08X}
DataSize  = 0x{:08X}
Attributes= 0x{:08X}
""".format(self.guid0, self.guid1, self.guid2, self.guid3[:2].encode('hex').upper(),
           self.guid3[-6::].encode('hex').upper(), self.Size, self.DataOffset, self.DataSize, self.Attributes)

def packl_ctypes(lnum, bitlength):
    length = (bitlength + 7) / 8
    a = create_string_buffer(length)
    PyLong_AsByteArray(lnum, a, len(a), 1, 1)  # 4th param is for endianness 0 - big, non 0 - little
    return a.raw

def list_variables(infcls=2):
    c_int_p = POINTER(c_int)

    privilege = win32security.LookupPrivilegeValue(None, 'SeSystemEnvironmentPrivilege')
    token = win32security.OpenProcessToken(win32process.GetCurrentProcess(),
                                           win32security.TOKEN_READ | win32security.TOKEN_ADJUST_PRIVILEGES)
    win32security.AdjustTokenPrivileges(token, False, [(privilege, win32security.SE_PRIVILEGE_ENABLED)])
    win32api.CloseHandle(token)
    NtEnumerateSystemEnvironmentValuesEx = windll.ntdll.NtEnumerateSystemEnvironmentValuesEx
    NtEnumerateSystemEnvironmentValuesEx.restype = c_int
    NtEnumerateSystemEnvironmentValuesEx.argtypes = [c_int, c_void_p, c_void_p]
    efi_vars = create_string_buffer(EFI_VAR_MAX_BUFFER_SIZE)
    length = packl_ctypes(long(EFI_VAR_MAX_BUFFER_SIZE), 32)
    status = NtEnumerateSystemEnvironmentValuesEx(infcls, efi_vars, length)
    status = (((1 << 32) - 1) & status)
    if (0xC0000023 == status):
        retlength, = struct.unpack("<I", length)
        efi_vars = create_string_buffer(retlength)
        status = NtEnumerateSystemEnvironmentValuesEx(infcls, efi_vars, length)
    elif (0xC0000002 == status):
        print("Error with EFI variable retrieval")
        return None
    if 0 != status:
        print("API call failed")
        raise WinError()

    start = 0
    buffer = efi_vars
    bsize = len(buffer)
    header_fmt = "<IIIIIHH8s"
    header_size = struct.calcsize(header_fmt)
    variables = dict()
    off = 0
    while (off + header_size) < bsize:
        efi_var_hdr = EFI_HDR_WIN(*struct.unpack_from(header_fmt, buffer[off: off + header_size]))

        next_var_offset = off + efi_var_hdr.Size
        efi_var_buf = buffer[off: next_var_offset]
        efi_var_data = buffer[off + efi_var_hdr.DataOffset: off + efi_var_hdr.DataOffset + efi_var_hdr.DataSize]

        # efi_var_name = "".join( buffer[ start + header_size : start + efi_var_hdr.DataOffset ] ).decode('utf-16-le')
        str_fmt = "{:d}s".format(efi_var_hdr.DataOffset - header_size)
        s, = struct.unpack(str_fmt, buffer[off + header_size: off + efi_var_hdr.DataOffset])
        efi_var_name = unicode(s, "utf-16-le", errors="replace").split(u'\u0000')[0]

        if efi_var_name not in variables.keys():
            variables[efi_var_name] = []
        #                                off, buf,         hdr,         data,         guid,                                                                                 attrs
        variables[efi_var_name].append((off, efi_var_buf, efi_var_hdr, efi_var_data,
                                        guid_str(efi_var_hdr.guid0, efi_var_hdr.guid1, efi_var_hdr.guid2,
                                                 efi_var_hdr.guid3), efi_var_hdr.Attributes))

        if 0 == efi_var_hdr.Size: break
        off = next_var_offset

    sorted_names = sorted(variables.keys())
    for name in sorted_names:
        for rec in variables[name]:
            print('\n\n')
            print('EFI Variable Name = {}'.format(name))
            print('Data:')
            length = 16
            tmp = []
            tmp_str = []
            i = 1
            for c in rec[3]:
                tmp += ["%2.2x " % ord(c)]
                if (not c in string.printable) or (c in string.whitespace):
                    ch = " "
                else:
                    ch = ord(c)
                tmp_str += ["%c" % ch]
                if i % length == 0:
                    tmp += ["| "]
                    tmp += tmp_str
                    tmp_s = "".join(tmp)
                    print(tmp_s)
                    tmp_str = []
                    tmp = []
                i += 1

            if 0 != len(rec[3]) % length:
                tmp += [(length - len(rec[3]) % length) * 3 * " "]
                tmp += ["| "]
                tmp += tmp_str
                tmp_s = "".join(tmp)
                print(tmp_s)

if __name__ == '__main__':
    list_variables()
